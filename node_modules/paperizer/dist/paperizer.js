import { ref as c } from "vue";
const C = (e) => {
  const t = c(), l = window.document.getElementById(e);
  if (l)
    t.value = l;
  else
    throw new Error(`Element with id '${e}' was not found.`);
  return { selectedElement: t };
}, b = (e) => {
  var m;
  const t = "_blank", l = ["fullscreen=yes", "titlebar=yes", "scrollbars=yes"], n = window.document.title, u = !0, r = !0, a = c(""), s = c(""), d = c(""), o = c(!0), i = c(""), w = c(!0), f = (v) => v == null ? void 0 : v.filter((y) => y);
  return a.value = (e == null ? void 0 : e.target) || t, s.value = (m = f((e == null ? void 0 : e.features) || l)) == null ? void 0 : m.join(
    ","
  ), d.value = (e == null ? void 0 : e.windowTitle) || n, o.value = (e == null ? void 0 : e.autoClose) ?? u, i.value = (e == null ? void 0 : e.bodyClass) ?? "", w.value = (e == null ? void 0 : e.autoPrint) ?? r, {
    target: a.value,
    features: s.value,
    windowTitle: d.value,
    autoClose: o.value,
    bodyClass: i.value,
    autoPrint: w.value
  };
}, h = () => ({ attachStyles: (t, l = []) => {
  l.length && l.forEach((n) => {
    let u = t.document.createElement("link");
    u.setAttribute("rel", "stylesheet"), u.setAttribute("type", "text/css"), u.setAttribute("href", n), t.document.getElementsByTagName("head")[0].appendChild(u);
  });
} }), g = (e, t) => {
  const l = c(), n = window.open("", e, t);
  return n && (n.opener || (n.opener = self), n.focus(), l.value = n), {
    previewWindow: l
  };
}, T = () => ({ writeWindowContent: (t, l, n) => {
  t.document.write(`
      <html>
        <head>
          <title>${t.document.title}</title>
        </head>
        <body class="${n}">
          ${l.innerHTML}
        </body>
      </html>
    `);
} }), W = (e, t, l = () => {
}) => {
  const n = (r) => {
    const { target: a, features: s, windowTitle: d, autoClose: o, bodyClass: i, autoPrint: w } = b(r), { previewWindow: f } = g(a, s);
    return { defaultWindow: f.value, target: a, windowTitle: d, autoClose: o, bodyClass: i, autoPrint: w };
  };
  return { paperize: () => {
    const { selectedElement: r } = C(e), { defaultWindow: a, target: s, windowTitle: d, autoClose: o, bodyClass: i, autoPrint: w } = n(t), { writeWindowContent: f } = T(), { attachStyles: m } = h();
    a && r.value && (a.document.title = d || document.title, f(a, r.value, i), m(a, t == null ? void 0 : t.styles), setTimeout(() => {
      a.document.close(), a.focus(), w && (a.print(), setTimeout(function() {
        s === "_blank" && o && a.close();
      }, 1)), l();
    }, 1e3));
  } };
}, P = {
  install: (e) => {
    const t = (l, n, u) => {
      const { paperize: r } = W(l, n, u);
      r();
    };
    e.config.globalProperties.$paperize = t;
  }
};
export {
  P as default,
  W as usePaperizer
};
